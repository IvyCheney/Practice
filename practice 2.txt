x, y, z = 1, "python", ["hello", "world"]
 print(x)
 print(y)
 print(z)
 
 m = "py"
m += "th"
print(m)

#! /usr/bin/env python
#coding:utf-8
print ("请输入任意一个整数数字：")
number = int(input())   #通过 raw_input()输入的数字是字符串
                            #用 int()将该字符串转化为整数
if number == 10:
    print ("您输入的数字是：%d"%number)
    print ("You are SMART.")
elif number > 10:
    print ("您输入的数字是：%d"%number)
    print ("This number is more than 10.")
elif number < 10:
    print ("您输入的数字是：%d"%number)
    print ("This number is less than 10.")
else:
    print ("Are you a human?")
    
x = 2
y = 8
a = "python" if x>y else "qiwsir"
b = "python" if x<y else "qiwsir"
print(a)
print(b)
语句1、
raw = [1,2,3,4,5,6,7,8,9,0]
print (raw)
b = raw.pop(0)
raw.append(b)
print (raw)
语句2、
#!/usr/bin/env Python
# coding=utf-8
from __future__ import division
import random
score = [random.randint(0,100) for i in range(40)]    #0 到 100 之间，随机得到 40 个整数，组成列表
print (score)
num = len(score)
sum_score = sum(score)               #对列表中的整数求和
ave_num = sum_score/num              #计算平均数
less_ave = len([i for i in score if i<ave_num])    #将小于平均数的找出来，组成新的列表，并度量该列表的长度
print ("the average score is:%.1f" % ave_num)
print ("There are %d students less than average." % less_ave)
sorted_score = sorted(score, reverse=True)    #对原列表排序
print (sorted_score)
语句3、
#!/usr/bin/env Python
# coding=utf-8
string = "I love  code."    #在 code 前面有两个空格，应该删除一个
print(string)                #为了能够清楚看到每步的结果，把过程中的量打印出来
str_lst = string.split(" ")    #以空格为分割，得到词汇的列表
print(str_lst)
words = [s for s in str_lst if s!=""]     #利用列表解析，将空格检出
print(words)

new_string = " ".join(words)    #以空格为连接符，将单词链接起来
print(new_string)

#!/usr/bin/env Python
# coding=utf-8

函数1、
from __future__ import division
import math

def quadratic_equation(a,b,c):
    delta = b*b - 4*a*c
    if delta<0:
        return False
    elif delta==0:
        return -(b/(2*a))
    else:
        sqrt_delta = math.sqrt(delta)
        x1 = (-b + sqrt_delta)/(2*a)
        x2 = (-b - sqrt_delta)/(2*a)
        return x1, x2

if __name__ == "__main__":
    print ("a quadratic equation: x^2 + 2x + 1 = 0")
    coefficients = (1, 2, 1)
    roots = quadratic_equation(*coefficients)
    if roots:
        print ("the result is:",roots)
    else:
        print ("this equation has no solution.")
函数2、        
#!/usr/bin/env Python
# coding=utf-8

#统计考试成绩#
from __future__ import division

def average_score(scores):
    score_values = scores.values()
    sum_scores = sum(score_values)
    average = sum_scores/len(score_values)
    return average

def sorted_score(scores):
    score_lst = [(scores[k],k) for k in scores]
    sort_lst = sorted(score_lst, reverse=True)
    return [(i[1], i[0]) for i in sort_lst]

def max_score(scores):
    lst = sorted_score(scores)    #引用分数排序的函数 sorted_score
    max_score = lst[0][1]
    return [(i[0],i[1]) for i in lst if i[1]==max_score]

def min_score(scores):
    lst = sorted_score(scores)
    min_score = lst[len(lst)-1][1]
    return [(i[0],i[1]) for i in lst if i[1]==min_score]

if __name__ == "__main__":
    examine_scores = {"google":98, "facebook":99, "baidu":52, "alibaba":80, "yahoo":49, "IBM":70, "android":76, "apple":99, "amazon":99}

    ave = average_score(examine_scores)
    print ("the average score is: ",ave)    #平均分

    sor = sorted_score(examine_scores)
    print ("list of the scores: ",sor)      #成绩表

    xueba = max_score(examine_scores)
    print ("Xueba is: ",xueba)              #学霸们

    xuezha = min_score(examine_scores)
    print ("Xuzha is: ",xuezha)             #学渣们
    函数3、
    #!/usr/bin/env Python
# coding=utf-8

import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n) + 1)):
        if n % i == 0:
            return False
    return True

if __name__ == "__main__":
    primes = [i for i in range(2,100) if is_prime(i)]    #从 2 开始，因为 1 显然不是质数
    print (primes)